/*
 * Copyright (C) 2007 The Guava Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.common.collect

import com.google.common.annotations.GwtCompatible
import java.io.Serializable

/**
 * An abstract base class for implementing the [decorator pattern](http://en.wikipedia.org/wiki/Decorator_pattern). The [ ][.delegate] method must be overridden to return the instance being decorated.
 *
 *
 * This class does *not* forward the `hashCode` and `equals` methods through to
 * the backing object, but relies on `Object`'s implementation. This is necessary to preserve
 * the symmetry of `equals`. Custom definitions of equality are usually based on an interface,
 * such as `Set` or `List`, so that the implementation of `equals` can cast the
 * object being tested for equality to the custom interface. `ForwardingObject` implements no
 * such custom interfaces directly; they are implemented only in subclasses. Therefore, forwarding
 * `equals` would break symmetry, as the forwarding object might consider itself equal to the
 * object being tested, but the reverse could not be true. This behavior is consistent with the
 * JDK's collection wrappers, such as [java.util.Collections.unmodifiableCollection]. Use an
 * interface-specific subclass of `ForwardingObject`, such as [ForwardingList], to
 * preserve equality behavior, or override `equals` directly.
 *
 *
 * The `toString` method is forwarded to the delegate. Although this class does not
 * implement [Serializable], a serializable subclass may be created since this class has a
 * parameter-less constructor.
 *
 * @author Mike Bostock
 * @since 2.0
 */
@GwtCompatible
abstract class ForwardingObject
/** Constructor for use by subclasses.  */
protected constructor() {

    /**
     * Returns the backing delegate instance that methods are forwarded to. Abstract subclasses
     * generally override this method with an abstract method that has a more specific return type,
     * such as [ForwardingSet.delegate]. Concrete subclasses override this method to supply the
     * instance being decorated.
     */
    protected abstract fun delegate(): Any

    /** Returns the string representation generated by the delegate's `toString` method.  */
    override fun toString(): String {
        return delegate().toString()
    }

    /* No equals or hashCode. See class comments for details. */
}
